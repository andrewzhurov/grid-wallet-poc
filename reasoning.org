#+STARTUP: indent
* how to exchange assets grID<->grID?
** anchor contract under grIDs
*** some IPEX dance for this "contract"
*** both anchor agreement
Disclosing these two anchors can't be deemed as proof that contract is settled,
as one party may not have disclosed it to the other (e.g., maliciously).
To avoid that possibility, "settled" condition is when both party know of each other agreement.

If acknowledgement is public - no way to cheat.
Even if Alice tells ack to Bob and Bob does not tell back - she'll learn soon, by o observing his blockchain.

If acknowledgment is private - possible to cheat, as Alice may disclose to Bob and Bob will not disclose to alice.
So we need to eliminate the need of disclosure, otherwise the settlement condition cannot be satisfied.

One way is to require acknowledgements to come with a blind, provided by the other party.
This way a party knows hash of the ack it needs.

Another way is to hash-link acknowledgement to other's agreement, without a blind.
This way other party knows the ack hash as well.
And it is still private to others as agreement itself is with a blind, and ack refs to it by hash.

In both cases a party knows the exact content of the other's ack (and its hash).
Second approach does the job with less comlexity and same privacy as the first's.

Con: other party may stretch acceptance, issuing it when it benefits the most (e.g., in a year)

**** contract may include block-time-threshold for settlement, if not seen in X blocks from contract - abort
This forces others to ack if they don't want to block their IDs for a lengthy time, misbehaving.
Still, another may indeed stop issuing new blocks.

***** double-block-time-threshold
This threshold applies to issuer's blockchain after he issued an ack.
If he doesn't ack an ack in X blocks - contract is canceled.

Still, other may misbehave by not doing so. He created ack, but not ack of an ack, freezing his ID for a time.
Same end-result, he's in control of whether it'll be accepted or canceled.

**** alternatively "no later than in 10 blocks after agreement there is an ack"
Settlement condition: "see all see all acks"

**** alternatively use settlement condition as "see everybody acks"
So its 3 rounds.
Acks
See all acks
See all see all acks
If by the end of block-time at least one reached condition - its final.

*** both anchor acks
*** having learned two acks party can show it to others as proof
** form a new jointly-controlled grID, anchor under it
*** Pro: when stuff is anchored it's consensual, no need to synchronize blockchains
*** Con: need to have disclosable proof that this grID represents relationship of member/"delegatee" grIDs
**** still need to anchor data under personal grIDs? If that's where the assets are tracked.


* login
** TODO [#B] add mock QR code for demo
** ways to login into Personal grID
*** Personal grID: create Login QR code; Device grID: scan from Login/Signup page
*** Personal grID: create Login Link;    Device grID: click on Login Link
**** link is more prone to interception than QR code, needs human-verification of to-login device
*** Personal grID: create Login Link;    Device grID: paste from Login/Signup page
**** unnecessary for production, can be done by clicking the link
***** this will either be interpreted by OS, feeding it to grID Wallet, or open up App Store page if it's not installed
****** the case when Device-to-connect is a desktop can be not catered for, as it's unlikely to encounter
**** fine for demo purposes


* mailbox
** TODO [#B] automatic reconnect
*** E.g., try on disconnect, then attempt * 10s, capped at 60s, until reconnected
** TODO [#B] change mailbox

* gossip
** Problem: spamming member with enormous grafts
*** Solution: talk to him only when heard from him directly
**** does not cater for initial sync, where all members will send enourmous db + graft
***** Vote on who's gonna sync him, repeat on timeout, increasing timeout
****** base initial timeout on amount to sync, giving syncer and syncee time to process
***** torrent-like
***** send only crucial info (members, mailboxes), hash the rest
****** let him pull later
******* torrent-like?
**** won't work on loss of a message, p2p will be halted between the two
***** Solution: talk when see that sent tip is an ancestor of his event
** Problem: gossip to consensus has a ton of useless chatter
"useless" as gossipped stuff does not drive peers closer to consensus.
*** TODO [#A] prioritize peers-to-send-to by their vote contribution towards next round
** TODO [#B] Problem: do not spam offline peers, yet collab when they're back online

* consensus
** Note: may not need BFT, only majority approval. I.e., F may be set to 0.
*** DONE [#A] set F to 0 by default for less events on demo
** TODO [#B] fix votes viz
** DONE via stake
** IDEA via threshold
*** Pro: can make use of 2-member optimization.

** TODO [#C] consensus stake and controlling stake
*** TODO viz stake-type
**** TODO controlling stake votes viz
***** as filling vote circles on events
*** TODO add stake-type-toggle


* feed
** DONE [#A] viz creds - Join Invite
** DONE [#A] fix feed item order for newly joined guy (KE items)

* creds

* viz
** TODO [#C] fix event colors
** TODO [#C] fix viz breaking, positioning events at 0,0

* how to store forked events?
** ref to events directly, event as Map
** sp indexed linked list chain, forked chain shares the fork base list
** sp indexed vec, forked events are in separate vec, link by idx
*** as could be with Bevy
*** were we able to create event tables per creator (incl. sybil creators)
** hash->event map, events contain hashes
*** costlier lookup than of vec O(1)
*** can store events in rkyv's Archive'd form

* how to gossip forked events?

* IDEA topic's hashgraph event as anchor under member's KEL
** PRO simple(?) state management - everything's under :ke
** PRO enhanced security & authenticity?
** PRO group chat topic has events from member AIDs
*** reduced chatiness
*** events can contain many refs, increased compaction
*** propose intents do not leak to others prematurelly, folks of an AID consent - then
*** PRO shared responsibility - outsiders don't know the one who proposed
*** PRO meta-hashgraph gives total order of events across hashgraph topics
*** PRO KERI's disclosure works on events
*** majority of signing weight peers needs to confirm
**** CON given it's low per member - they may be offline - longer wait
*** CON more total chatter?
** PRO neat for debugging - each device KEL will have links to other device's KELs - one giant meta-hashgraph (given KELs anchor public stuff)
** CON device KEL as source of truth - bottleneck
*** anchor in batch
*** device KEL will grow like CRAZY
**** hashgraph will contain a TON of junk/empty events
***** it's not meant to be persisted
** CON may be easier to correlate, observing activity in device KELs

* what's valuable for ala Discord app?
** it's about community management
*** in form of a controlled playground
**** do we even want that?
***** a place where you can collab with others, if owners so wish

* how do people use social apps?
** blogs
*** post long-form
** twitter
*** post short-form
*** subscribe to another's posts
*** DM
** discord
*** roles
**** community admin: manages community topics, priveleges authZ of community managers
***** perms: add topic, remove topic
**** community manager: manages topics according to their authZ
***** perms: remove member, remove message
**** members: participate in topics they've been authZ to
***** perms: read messages, write messages
*** juxt
**** messages comes associated with tags (#bevy #help) (#keri #acdc)
***** topics aggregate messages / they are filters
****** in #bevy aggregates everything (from (#bevy) (#bevy #help) (#bevy #avian))
****** DM is yet another topic (#aid1 #aid2 #private)
****** topic tags are in set, so (#bevy #help) = (#help #bevy)
***** tags of a message inherit selected topic tags - context tags
***** tags can be automatically derived out of content
****** as addition to context tags
***** "discord" community can have preset/default topic hierarchy
****** yet it's end-user customizable to their liking
****** OR to have default hierarchy automatically derived
******* e.g., based on the amount of messages in a topic
****** it's enough to have one root-level topic (#bevy), where all bevy-related events land
***** ??? sers anchor posts under their KELs
****** posts ref child-free tips known to user / or ref latest child-free tip
****** friend cordially gossips to a friend what he needs
******* posts in topic another follows (#bevy #help #render)
******** ??? will post end up in every subset topic
********* (#bevy #help #render) (#bevy #help) (#help #render) (#bevy #render) ...
********* or are these hierarchical? [#bevy #render #help]
********** ending up in [#bevy] [#bevy #render]
***** ??? members may wish to have a private group topic (e.g., admins of Acme)
****** group AID, with membership based on credential (automatic add/remove member)
******* ehh, not uniform with tags
****** <acme-admin-cred> as tag
******* Problem: post with (#server #auth <acme-admin-cred>) would be added to (#server #auth)?
******* begs for a separate :for-the-eyes-of / :disclosee-authorization field on event
******** where one can specify rules on who's eligible to receive it (<acme-admin-cred>)
**** tags are derived client-side
***** how to
****** https://github.com/guillaume-be/rust-bert
****** https://github.com/e-tornike/best-of-ml-rust
***** IDEA use IPVM to calculate tags
****** will substantially spare the need of redundant compute
******* e.g., group of 1k members, where >3 receipts are enough
***** makes derivation of client-side tags end-user-customizable
***** PROBLEM how to know that another may need a message you got?
****** analyze messages another posts, likes, re-tweets
******* deriving concepts another's interested in
* hierarchical consensus weight
** PRO default as control weights
*** PRO makes consensus weight config optional
*** PRO automatically in sync with controlling keys
*** Problem: may shoot yourself in the foot with reserved keys - they'll have consensus yet won't participate
**** Solution: do not include keys without mailboxes
** PRO uniform "enought weight" calculation
** CON really not needed for consensus, what's the end-user benefit?
** CON complicates hg voting, round calc
** CON costlier to compute
** CON harder to viz
** Decision: NO, complicates, end-user benefit not found

* annotations
** https://github.com/annotation/stam-rust

* names of control hierarchy?
** only of control hierarchy? what about stake (hierarchy?)
*** is stake a hierarchy?
**** YES could use :key-event/threshold weights as consensus stake
***** (where majority is > sum / 2; or > (sum / 2) + safety margin)
****** they need not be mapped directly though
******* but hierarchical support of consensus weights is nice
***** so we have:
****** 1. member aid hierarchy
****** 2. consensus threshold
******* consensus fellas / non-control aids  do not need to set init-keys
****** 3. controlling threshold
******* 3.1 controlling member aid hierarchy
A subset of 1.
So only controlling aids are leaked out, consensus aids are kept private to topic.

* interactable topics syncing between devices of an AID
** store locally on devices,topic member sends events to othes, this way they learn it
** store in AIDs KEL, members anchor topics to their AIDs, this way you have a KEL -> you have all topics
*** member of an AID that did not join the topic can create init key (in its KEL)
**** then send event to topic members
***** Problem: topic includes only initial member AIDs, they may have change since then, as well as initial members' mailboxes
****** you need somebody online to learn latest state
******* that can be topic members
******** as long as you know at least 1 topic member -> you can ask to sync up
******** Y: as long as at least 1 topic member knows you -> you get synced up

* disclosure
** TODO disclose to child aids only necessary KEs
** TODO disclose KEs with hashes as anchors
** DONE disclose delta KEs, those that are on top of what's known
*** this logic can be made generic, what we do is we replicate a DAG, same as with hg
**** potential impl: id_f(node)
***** Problem: hg-specific and aid->ke specific lookup of that id

* DONE viz information toggles (rounds, witnesses, votes)

* how to color events given we color member aids?
** gotcha: same aid can be a controller under different aids
** member-aids+event->controlling-path
** aid-to-color+member-aid->color
** DONE Option1: parent color as blend of children colors
** Option2: children colors as parent's color

* is there need for a Device AID?
** what do you do with these devices?
*** connect to other your devices to assemble Personal AID
*** you have an ID and you log into it from devices
**** keys are manage in your ID
***** so you either log in or create a new AID
<Input: Device Name>
<Tab: Link device>                 | <Tab: Create new AID>
<QR code>                          | <Input: AID Name>
or <Scan QR code>                  |
or <Button: Link Request>          | <Button: Create>


* show-and-tell improvements
** start with context / exposition
*** personal ID - like Google Account, but _yours_
**** why?
***** key != ID, key needs to be rotated
***** pre-rotation
***** persistent identifier, yours
***** authenticity of actions you do
***** accumulate certificates
***** communicate trust to others
***** access based on certificates
***** all preserved across key-rotations
*** group ID - collectively controlled, like a company

* how to use "how to reach me"?
** one mailbox per AID
*** still will need to rotate it
**** anchor mailbox in KEL
***** need to sync this cred with contacts
****** could make it a public ACDC
******* then you can sync KEL with contacts
******** +1, as we'll need it for control update notification
******* -1, may want to contractually protect it, e.g., forbit contacts from sharing it
******** how's that gonna protect you?

* topic
** DONE add member
** TODO consensus threshold tuning
** LATER switch consensus-keys to real keys
** LATER sign events
** LATER check event signatures
* AID
** DONE key rotation
** DONE add member
** TODO remove member
** DONE derive consensus threshold out of ke
** TODO devire consensus keys out of ke
** DONE anchored name
** TODO anchored avatar
** LATER switch signing-keys and next-signing-keys to real keys
** LATER sign ke
** LATER validate ke signatures
* ACDC
** TODO prettier view of vLEI certificates
** TODO hierarchical view of vLEI certificates
* chat
** TODO message creator avatar & name
** DONE unreds indicator
** DONE fix send message button styles
* viz
** TODO viz in sp tip chunks
** DONE event creator avatar & name
** DONE position members by AID creation time
** DONE move accept-connect-invite & +G to contacts&groups nav
** DONE Promote to AID action on groups only
** DONE viz groups as squares
** DONE viz multisig AIDs as rounded squares

* fitness of UI libraries
| Components / UI Library | MUI                    | Base UI                            | Joy UI     |
|-------------------------+------------------------+------------------------------------+------------|
| Floating Label Input    | +                      |                                    | +          |
| Resiziable TextArea     | - / See Base UI        | Input Multiline/ TextArea Autosize | +          |
| Switch                  | +                      | + / Simple                         | + / Ts?    |
| Reaction Group          | ToggleButton Exclusive |                                    |            |
| Left Nav                | ToggleButton Vertical  | ~ Tabs Vertical / No Ts            | RB / No Ts |
| Avatar                  | Avatar                 |                                    | +          |
| Avatar Badge            | +                      | ~ / No Ts                          | ~ / No Ts  |
| Icons                   | +                      |                                    |            |
| Messages                | Virtualized List       |                                    |            |
| Form Dialog             | +                      | + / Modal                          | + / Blur   |
| Speed Dial              | +                      |                                    |            |
|                         |                        |                                    |            |
|                         |                        |                                    |            |
|                         |                        |                                    |            |
|                         |                        |                                    |            |
